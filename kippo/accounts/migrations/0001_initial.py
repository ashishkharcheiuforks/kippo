# Generated by Django 2.2.3 on 2019-07-29 15:41

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='KippoUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('github_login', models.CharField(blank=True, default=None, help_text='Github Login username', max_length=100, null=True)),
                ('is_github_outside_collaborator', models.BooleanField(default=False, help_text='Set to True if User is an outside collaborator')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of Country', max_length=130)),
                ('alpha_2', models.CharField(help_text='ISO-3166 2 letter abbreviation', max_length=2)),
                ('alpha_3', models.CharField(help_text='ISO-3166 3 letter abbreviation', max_length=3)),
                ('country_code', models.CharField(help_text='ISO-3166 3 digit country-code', max_length=3)),
                ('region', models.CharField(help_text='Global Region', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='EmailDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(auto_now_add=True)),
                ('updated_datetime', models.DateTimeField(auto_now=True)),
                ('closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('domain', models.CharField(help_text='Organization email domains allowed to access organization information [USERNAME@{DOMAIN}]', max_length=255)),
                ('is_staff_domain', models.BooleanField(default=True, help_text='Domain has access to admin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KippoOrganization',
            fields=[
                ('created_datetime', models.DateTimeField(auto_now_add=True)),
                ('updated_datetime', models.DateTimeField(auto_now=True)),
                ('closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=256)),
                ('github_organization_name', models.CharField(max_length=100, unique=True)),
                ('day_workhours', models.PositiveSmallIntegerField(default=7, help_text='Defines the number of hours in the workday')),
                ('default_task_category', models.CharField(blank=True, default='study', help_text='Default category to apply to KippoTask objects', max_length=256, null=True)),
                ('default_task_display_state', models.CharField(default='in-progress', help_text='Default Task STATE to show on initial task view', max_length=150)),
                ('google_forms_project_survey_url', models.URLField(blank=True, default=None, help_text='If a "Project Survey" is defined, include here', null=True)),
                ('google_forms_project_survey_projectid_entryid', models.CharField(blank=True, default=None, help_text='"Project Identifier" field in survey (ex: "entry:123456789")', max_length=255, null=True)),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='accounts_kippoorganization_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PublicHoliday',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Holiday Name', max_length=150)),
                ('day', models.DateField()),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.Country')),
            ],
            options={
                'ordering': ['-day'],
            },
        ),
        migrations.CreateModel(
            name='PersonalHoliday',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(auto_now_add=True)),
                ('is_half', models.BooleanField(default=False, help_text='Select if taking only a half day')),
                ('day', models.DateField()),
                ('duration', models.SmallIntegerField(default=1, help_text='How many days (including weekends/existing holidays)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-day'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationMembership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_datetime', models.DateTimeField(auto_now_add=True)),
                ('updated_datetime', models.DateTimeField(auto_now=True)),
                ('closed_datetime', models.DateTimeField(editable=False, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address with Organization', max_length=254, null=True)),
                ('is_project_manager', models.BooleanField(default=False)),
                ('is_developer', models.BooleanField(default=True)),
                ('sunday', models.BooleanField(default=False, help_text='Works Sunday')),
                ('monday', models.BooleanField(default=True, help_text='Works Monday')),
                ('tuesday', models.BooleanField(default=True, help_text='Works Tuesday')),
                ('wednesday', models.BooleanField(default=True, help_text='Works Wednesday')),
                ('thursday', models.BooleanField(default=True, help_text='Works Thursday')),
                ('friday', models.BooleanField(default=True, help_text='Works Friday')),
                ('saturday', models.BooleanField(default=False, help_text='Works Saturday')),
                ('created_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='accounts_organizationmembership_created_by', to=settings.AUTH_USER_MODEL)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='accounts.KippoOrganization')),
                ('updated_by', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, related_name='accounts_organizationmembership_updated_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
